# Python implementation Randomized Pivot QuickSort using Lomuto's partition Scheme.
# Contributed by @ddhira123
# References: GeeksforGeeks

import random
 
'''
The function which implements QuickSort.
array : array to be sorted.
start : starting index of the array.
stop : ending index of the array.
'''
def quicksort(array, start , stop):
    if(start < stop):
         
        # pivot is the index where the pivot index lies in the array
        # The pivot index is randomly generated by random_partition function
        pivot = random_partition(array, start, stop)
         
        # At this stage the array is partially sorted around the pivot. 
        # Separately sorting the left part of the array and the
        # right part of the array that has partitioned by pivot.
        quicksort(array , start , pivot-1)
        quicksort(array, pivot + 1, stop)
 
# This function generates random pivot, swaps the first element with the pivot 
# and calls the partition function.
def random_partition(array , start, stop):
 
    # Generating a random number between the starting index of the array and the ending index of the array.
    randpivot = random.randrange(start, stop)
 
    # Swapping the starting element of the array and the pivot
    array[start], array[randpivot] = array[randpivot], array[start]
    return partition(array, start, stop)
 
'''
This function takes the first element as pivot, places the pivot element at the correct position 
in the sorted array. All the elements are re-arranged according to the pivot, the elements smaller than the
pivot is places on the left and the elements greater than the pivot is placed to the right of pivot.
'''
def partition(array,start,stop):
    pivot = start # pivot
     
    # a variable to memorize where the current position of start lies
    # This also holds important aspect for the quicksort() so that can
    # reach the stopping condition.
    i = start + 1
     
    # partition in the array starts from.
    for j in range(start + 1, stop + 1):
        # if the current element is smaller or equal to pivot, 
        # place it to the left side of the partition.
        if array[j] <= array[pivot]:
            array[i] , array[j] = array[j] , array[i]
            i = i + 1
    array[pivot] , array[i - 1] = array[i - 1] , array[pivot]
    pivot = i - 1
    return (pivot)
 
# Driver Code
if __name__ == "__main__":
    array = [99, 1, 4, 3, 17, 21, 16, 34, 29]
    quicksort(array, 0, len(array) - 1)
    print(array)